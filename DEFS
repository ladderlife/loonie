import json

include_defs('//tools/clojure/clojure_rules.py')
include_defs('//tools/clojurescript/clojurescript_rules.py')

def load_clojure_autodeps(extra={}):
    buck_file_path = get_base_path() + "/BUCK.autogenerated"
    add_build_file_dep("//" + buck_file_path)
    with open(buck_file_path) as f:
        contents = json.load(f)
        for name, data in contents.iteritems():
            if name in extra.keys():
                extra_data = extra.get(name)
                for k, v in extra_data.iteritems():
                    if data.get(k) and isinstance(data[k], list):
                        data[k] += v
                    else:
                        data[k] = v
            type = data.pop('$type')
            globals()[type](name, **data)

real_java_binary = java_binary
def java_binary(name, **kwargs):
    kwargs.setdefault('blacklist', ['META-INF/.*\.(RSA|DSA|SF)', 'deps\.cljs'])
    real_java_binary(name=name, **kwargs)

real_prebuilt_jar = prebuilt_jar
def prebuilt_jar(name, deps=[], visibility=[], *args, **kwargs):
    deps = list(deps)

    extract_cmd = 'mkdir -p $OUT && $(exe //tools:unzip) $(location :' + name + ') $OUT'
    extract_cmd += ' && (rm $OUT/META-INF/*.SF $OUT/META-INF/*.RSA 2>/dev/null || true)'

    target = '//' + get_base_path() + ':' + name
    if target == '//third_party/clojure:tools.reader':
        deps = []  # circular dep between clojure, cljs & tools.reader.
    if target == '//third_party/clojure:clojurescript':
        # Slight hack: some cljc files in the clojurescript jar
        # are lies - they're really clj files.
        for f in ['js_deps', 'util', 'repl']:
            extract_cmd += ' && mv $OUT/cljs/' + f + '.{cljc,clj}'
        # Not only does it not compile as cljs; it doesn't compile as a .clj either.
        extract_cmd += " && sed -i.bak 's!#?(:clj Exception :cljs js/Error)!Exception!' $OUT/cljs/repl.clj"
        # Hack #2: remove rhino support in the repl to not conflict with
        # yui's version of rhino.
        extract_cmd += ' && rm $OUT/cljs/repl/rhino.clj'
        deps.remove('//third_party/mozilla:rhino')
        # Hack #3: there's a dependency cycle between clojurescript & clojure.test.check.
        extract_cmd += ' && rm $OUT/cljs/spec/test.cljs'

    genrule(
        name=name + '_clj_extract',
        out=name,
        cmd=extract_cmd,
        visibility=visibility,
    )

    kwargs['deps'] = deps
    kwargs['name'] = name
    kwargs['visibility'] = visibility
    real_prebuilt_jar(*args, **kwargs)
    cljs_build_prebuilt_jar(real_prebuilt_jar, *args, **kwargs)
    clj_build_prebuilt_jar(real_prebuilt_jar, *args, **kwargs)
